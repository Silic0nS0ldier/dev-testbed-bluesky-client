load("@aspect_rules_js//js:defs.bzl", "js_run_devserver")
load("@npm//build_tools:@web/dev-server/package_json.bzl", web_dev_server_bin = "bin")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("//build_defs/rollup_bundle:rollup_bundle.bzl", "rollup_bundle")
load("//build_defs/lightningcss_bundle:lightningcss_bundle.bzl", "lightningcss_bundle")
load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@npm//:defs.bzl", "npm_link_all_packages")

npm_link_all_packages(name = "node_modules")

# NOTE This app has a largely unified build process, with the dev server consuming compiled (but
# unbundled) sources.

ts_project(
    name = "js",
    tsconfig = ":tsconfig.json",
    srcs = glob(["src/**/*.ts", "src/**/*.tsx"]),
    out_dir = "src",
    deps = [
        ":node_modules/vendor",
    ],
    root_dir = "src",
)

filegroup(
    name = "css",
    srcs = glob(["src/**/*.css"]),
)

filegroup(
    name = "fonts",
    srcs = glob(["src/fonts/**/*.ttf"]),
)

filegroup(
    name = "favicons",
    srcs = glob([
        "src/android-chrome-*",
        "src/apple-touch-*",
        "src/favicon*",
    ]),
)

filegroup(
    name = "manifest",
    srcs = ["src/site.webmanifest"],
)

filegroup(
    name = "index",
    srcs = ["src/index.html"],
)

web_dev_server_bin.wds_binary(
    name = "wds",
)

# This can be run via `ibazel run //web_app:devserver` for automatic reloads when source changes.
# Otherwise `bazel run //web_app:devserver` will provide a one-off run of the devserver.
js_run_devserver(
    name = "devserver",
    args = [
        "--watch",
        "--open",
        "--root-dir", "./web_app/src",
        "--node-resolve",
    ],
    data = [
        ":js",
        ":css",
        ":fonts",
        ":favicons",
        ":manifest",
        ":index"
    ],
    tool = ":wds",
)

rollup_bundle(
    name = "js_bundle",
    srcs = [":js"],
    entry_points = [
        "src/main.js",
    ],
    external_modules = [],
    visibility = [],
)

lightningcss_bundle(
    name = "css_bundle",
    srcs = glob(["src/**/*.css"]),
    entry_point = "src/main.css",
    visibility = [],
)

copy_to_directory(
    name = "dist",
    srcs = [
        ":js_bundle",
        ":css_bundle",
        ":fonts",
        ":favicons",
        ":manifest",
        ":index"
    ],
    replace_prefixes = {
        # :js_bundle
        "js_bundle/": "",
        # :css_bundle
        "css_bundle/": "",
        # :everything else
        "src/": "",
    },
)
